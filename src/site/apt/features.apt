              -------------------
              Features
              -------------------
              Christof Roduner
              -------------------
              03/06/2007
              -------------------

Features

  The following outlines the features available in Accada's EPCIS Repository
  implementation and in its Capture and Query Clients.

* Accada EPCIS Modules

  The Accada EPCIS Project comprises three separate modules:

  * an EPCIS Repository implementation

  []

  * an interactive EPCIS Capture Client

  []

  * an interactive EPCIS Query Client

  []

  The modules implement the EPC Information Services (EPCIS) Specification
  defined by EPCglobal and its members.


* Accada EPCIS Repository Features

  Our implementation features the EPCIS capture interface and the EPCIS
  query interface (including the query control interface and the query callback
  interface) as defined by EPCglobal. We provide an HTTP binding for the capture interface and a SOAP
  binding for the query interface. Our implementation requires Java 1.5 (or
  higher) and a MySQL database (version 5.0.15 or higher) as a storage engine.


* Accada EPCIS Capture and Query Client Features

  The Accada EPCIS Capture and Query Clients provide an intuitive graphical
  user interface to store EPCIS events to and retrieve EPCIS events from an EPCIS
  Repository. They can be used to interactively test and explore any EPCIS
  Repository (based on Accada or third-party products) supporting the HTTP binding 
  for the capture cnterface and the SOAP binding for the query interface.
  
  The following two screenshots show the features available in our EPCIS Capture
  and Query Clients:


[images/epcis_capture_gui.png] Accada EPCIS Capture Client

  .

[images/epcis_query_gui.png] Accada EPCIS Query Client


* Detailed Feature List

  Accada EPCIS supports all mandatory and some optional features of EPCglobal's
  EPC Information Services (EPCIS) Specification, Version 1.0. The following
  table gives an overview of which features are supported and which are not.

*--------------+-----------------------------*----------------------*-----------*
| <<Feature>>  | <<Described in>>            | <<Supported in>>     | <<Notes>> |
|              | <<EPCIS Specification 1.0>> | <<Accada EPCIS 0.3>> |           |
*--------------+-----------------------------*----------------------*-----------*
| Extension mechanism (e.g. new event fields) | Sect. 6.3 | X | {{{#\[1\]}\[1\]}}
*--------------+-----------------------------*----------------------*-----------*
| Hierarchical vocabularies (e.g. <<<urn:epc:id:sgtin:123.*>>>) | Sect. 6.5 | X |
*--------------+-----------------------------*----------------------*-----------*
| Core event types (EventData & MasterData) | Sect. 7.2 | X | {{{#\[2\]}\[2\]}}
*--------------+-----------------------------*----------------------*-----------*
| Core capture operations (capture interface) | Sect. 8.1 | X |
*--------------+-----------------------------*----------------------*-----------*
| Authentication & authorization for capture operations | Sect. 8.1.1 | - | {{{#\[5\]}\[5\]}}
*--------------+-----------------------------*----------------------*-----------*
| Core query operations (query control & query callback interface) | Sect. 8.2 | X | {{{#\[3\]}\[3\]}}
*--------------+-----------------------------*----------------------*-----------*
| Authentication & authorization for query operations | Sect. 8.2.1 | - | {{{#\[5\]}\[5\]}}
*--------------+-----------------------------*----------------------*-----------*
| Triggered and scheduled queries | Sect. 8.2.5 | X |
*--------------+-----------------------------*----------------------*-----------*
| Error Conditions (exceptions) | Sect. 8.2.6 | X | {{{#\[4\]}\[4\]}}
*--------------+-----------------------------*----------------------*-----------*
| Predefined queries (SimpleEventQuery & SimpleMasterDataQuery) | Sect. 8.2.7 | X |
*--------------+-----------------------------*----------------------*-----------*
| Message queue binding for capture operations module | Sect. 10.1 | - | {{{#\[5\]}\[5\]}}
*--------------+-----------------------------*----------------------*-----------*
| HTTP binding for the capture operations module | Sect. 10.2 | X | {{{#\[5\]}\[5\]}}
*--------------+-----------------------------*----------------------*-----------*
| SOAP over HTTP binding for query control interface | Sect. 11.2 | X | {{{#\[5\]}\[5\]}}
*--------------+-----------------------------*----------------------*-----------*
| XML over AS2 binding for query control interface | Sect. 11.3 | - | {{{#\[5\]}\[5\]}}
*--------------+-----------------------------*----------------------*-----------*
| XML over HTTP binding for query callback interface | Sect. 11.4.2 | X | {{{#\[5\]}\[5\]}}
*--------------+-----------------------------*----------------------*-----------*
| XML over HTTPS binding for query callback interface | Sect. 11.4.3 | X | {{{#\[5\]}\[5\]}}
*--------------+-----------------------------*----------------------*-----------*
| XML over AS2 binding for query callback interface | Sect. 11.4.4 | - | {{{#\[5\]}\[5\]}}
*--------------+-----------------------------*----------------------*-----------*



   {\[1\]} - no support for "new vocabulary type" extension
   
   {\[2\]} - EPC syntax is not checked against Tag Data Standard 1.3
   
   {\[3\]} - query paramter <<<orderBy>>> does not support ordering for event field extensions, parameters <<<EQATTR_fieldname_attrname>>> and <<<HASATTR_fieldname>>> do not support event field extensions
   
   {\[4\]} - <<<SecurityException>>> is never thrown, <<<QueryTooComplexException>>> is thrown when query execution takes longer than a predefined threshold, <<<QueryTooLargeException>>> is thrown when a query returns more results than a predefined threshold
   
   {\[5\]} - optional feature

