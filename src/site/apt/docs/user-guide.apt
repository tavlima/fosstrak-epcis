              -------------------
              User Guide
              -------------------
              Marco Steybe, Andrea Groessbauer, Christof Roduner
              -------------------
              03/19/2008
              -------------------

User Guide

* Contents

   [[1]] {{{#About this Guide}About this Guide}}

   [[1]] {{{#Getting Started}Getting Started}}

         [[i]] {{{#Setting up your own Repository}Setting up your own Repository}}

         [[i]] {{{#Using the Capture Client to send Events to a Repository}Using the Capture Client to send Events to a Repository}}

         [[i]] {{{#Using the Query Client to browse a Repository}Using the Query Client to browse a Repository}}

   [[1]] {{{#Interacting with a Repository}Interacting with a Repository}}

         [[i]] {{{#How to Capture EPCIS Events}How to Capture EPCIS Events}}

         [[i]] {{{#How to Query an EPCIS Repository}How to Query an EPCIS Repository}}

         [[i]] {{{#How to Use a Query Schedule}How to Use a Query Schedule}}

         [[i]] {{{#How to Subscribe a Scheduled Query}How to Subscribe a Scheduled Query}}

         [[i]] {{{#How to Subscribe a Triggered Query}How to Subscribe a Triggered Query}}

         [[i]] {{{#How to Use the Query Callback Interface}How to Use the Query Callback Interface}}

   [[1]] {{{#Runtime Configuration of your EPCIS Repository}Runtime Configuration of your EPCIS Repository}}


* {About this Guide}

  This user guide is intended to help people in getting started with the Accada
  EPCIS repository application. The guide outlines the steps to follow in order
  to set up your own EPCIS repository, and describes how to interact with such
  a repository.

  If you just want to see Accada's EPCIS repository in action and explore its
  features and functionalities, you might want to try our Query and/or Capture
  client applications (available through Java Web Start at the
  {{{../demo.html}demo page}}) without setting up your own repository. However,
  if you want to run your own instance of the EPCIS repository, or if you like
  to incorporate Accada's EPCIS implementation into your own project, continue
  reading.

  If you cannot find your answer here, feel free to ask the
  {{{mailto:accada-epcis-user@lists.sourceforge.net}Accada EPCIS user mailing list}}.

* {Getting Started}

  This section of the user guide includes a step-by-step tutorial describing
  how to set up your own EPCIS repository and describes how to use the client
  applications to send EPCIS capture and query requests to your own repository.


** {Setting up your own Repository}

   In order to setup your own EPCIS repository, follow the step-by-step
   tutorial outlined below:

   [[1]] Make sure you have have an {{{http://tomcat.apache.org}Apache Tomcat}}
   servlet container (version 5.5 or higher) running. It will be used to deploy
   and run the EPCIS repository web application.

   [[1]] {{{../download.html}Download}} the <Accada EPCIS repository>
   distribution and place the WAR file contained in the archive in your
   Tomcat's <webapps> directory. After restarting Tomcat, the WAR file will be
   exploded.

   [[1]] Make sure you have have a {{{http://dev.mysql.com/downloads/mysql/5.0.html}MySQL server}}
   (version 5.0 or higher) running. It will be used by the EPCIS repository
   to store event data.

   [[1]] Setup a {MySQL} database for the EPCIS repository to use.
 
   Log into the MySQL Command Line Client as <root> and perform the following
   steps:
 
     [[a]] Create the database (in this example, we'll use <epcis> as the
     database name).

-----------------------------
mysql> CREATE DATABASE epcis;
-----------------------------

     [[a]] Create a user that is allowed access to the newly created database
     (in this example, we'll use the user name <epcis> and password <epcis>).

--------------------------------------------------------------------------------------
mysql> GRANT SELECT, INSERT, UPDATE, DELETE ON epcis.* TO epcis IDENTIFIED BY 'epcis';
--------------------------------------------------------------------------------------

     [[a]] Create the database schema by running the setup script contained
     in the archive you downloaded. (Make sure you are connected to the newly
     created database before running the script.)

----------------------------------------------------------
mysql> USE epcis;
mysql> SOURCE <path-to-unpacked-download>/epcis_schema.sql
----------------------------------------------------------

     [[a]] Optionally populate the repository with some sample data.

-------------------------------------------------------------
mysql> SOURCE <path-to-unpacked-download>/epcis_demo_data.sql
-------------------------------------------------------------

   [[1]] Configure the repository to connect to the newly created database.

   In a default installation of Tomcat, the database connection settings can be
   found in <<<$TOMCAT_HOME/conf/Catalina/localhost/epcis-repository-\<version\>.xml>>>.
   The relevant attributes that must be adjusted are <username>, <password>,
   and <url>.

---------------------------------------------------------------------------
<Resource
    name="jdbc/EPCISDB"
    type="javax.sql.DataSource"
    auth="Container"
    username="epcis"
    password="epcis"
    driverClassName="com.mysql.jdbc.Driver"
    url="jdbc:mysql://localhost:3306/epcis?autoReconnect=true">
</Resource>
-----------------------------------------------------------------------------

   If you used the default user name, password and database name from the
   examples above, then you don't need to reconfigure anything here. If,
   however, you used different values, you need to stop Tomcat, change the
   values and restart Tomcat.

   [[1]] Check if the application is running.

   In a default installation of Tomcat, the capture interface will now be
   available at <<<http://localhost:8080/epcis-repository-\<version\>/capture>>>,
   whereas the query interface will be available at
   <<<http://localhost:8080/epcis-repository-\<version\>/query>>>.

   Point your browser to the capture URL. You should see a short information
   page similar to this:

---------------------------------------------------------------------------
This service captures EPCIS events sent to it using HTTP POST requests.
The payload of the HTTP POST request is expected to be an XML document
conforming to the EPCISDocument schema.

For further information refer to the xml schema files or check the Example
in 'EPC Information Services (EPCIS) Version 1.0 Specification', Section 9.6.
-----------------------------------------------------------------------------

   To also check if the query interface is set up correctly, point your browser
   to the query address and append a <<<?wsdl>>> to the URL. The WSDL file of
   the query service should now show up and be displayed in your browser.

   Proceed to the next sections to test your repository installation using one
   of our client applications.

   [[1]] Check the application's log file in case of problems.

   The application's log file is kept in <<<TOMCAT_HOME/logs/epcis-repository.log>>>.
   In case of problems with your own EPCIS repository instance, this is the
   first place to look for information about errors or specific exceptions
   thrown by the application.

** {Using the Capture Client to send Events to a Repository}

   [[1]] {{{download.html}Download}} the capture client binaries.

   [[1]] Run the executable JAR file contained in the archive you downloaded.
   This will launch the Accada EPCIS Capture Client. 

-------------------------------------------
java -jar epcis-captureclient-<version>.jar
-------------------------------------------

   [[1]] In the GUI, you need to specify the URL of the EPCIS repository you
   want to connect to. You can either use your local repository instance
   (e.g., <<<http://localhost:8080/epcis-repository-\<version\>/capture>>>>) or
   our public repository (<<<http://demo.accada.org/epcis/capture>>>), or any
   other EPCIS repository. You can now fill in the EPCIS event data and submit
   the EPCIS capture request by clicking "Generate event".

   []

   If you intend to use our capture client API library in your own Java
   project, you should refer to the
   "{{{#How to Capture EPCIS Events}How to Capture EPCIS Events}}" section
   below.


** {Using the Query Client to browse a Repository}

   [[1]] {{{download.html}Download}} the query client binaries and follow the
   same steps as above. You can now fill in the query parameters in the GUI and
   submit the request to the repository by clicking "Run query". The results of
   the query will be displayed in a separate window.

   []

   If you intend to use our query client API library in your own Java project,
   you should refer to the
   {{{#How to Query an EPCIS Repository}How to Query an EPCIS Repository}}
   section below.




* {Interacting with a Repository}

  This section shows how to use the basic features of Accada's EPCIS
  implementation, i.e., how to send EPCIS events to the capture interface and
  how to create an EPCIS query for retrieving information from the repository.

** {How to Capture EPCIS Events}

   In order to capture EPC data you need to wrap the data into XML conforming
   to the EPCIS XML schema for event types. This EPCIS event must then be sent
   as the payload in an HTTP POST request to the repository's capture
   interface. An example event, an ObjectEvent, serialized into XML might look
   as follows:

---------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<epcis:EPCISDocument
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:epcis="urn:epcglobal:epcis:xsd:1"
    xmlns:epcglobal="urn:epcglobal:xsd:1"
    xsi:schemaLocation="urn:epcglobal:epcis:xsd:1 EPCglobal-epcis-1_0.xsd"
    creationDate="2008-03-16T22:13:16.397+01:00"
    schemaVersion="1.0">
  <EPCISBody>
    <EventList>
      <ObjectEvent>
        <eventTime>2008-03-16T22:13:16.397+01:00</eventTime>
        <eventTimeZoneOffset>+01:00</eventTimeZoneOffset>
        <epcList>
          <epc>urn:epc:id:sgtin:1.1.0</epc>
        </epcList>
        <action>ADD</action>
        <bizStep>urn:accada:demo:bizstep:testing</bizStep>
        <disposition>urn:accada:demo:disp:testing</disposition>
        <readPoint>
          <id>urn:accada:demo:rp:1.1</id>
        </readPoint>
        <bizLocation>
          <id>urn:accada:demo:loc:1.1</id>
        </bizLocation>
        <bizTransactionList>
          <bizTransaction type="urn:accada:demo:btt:testing">urn:accada:demo:biztrans:1.1</bizTransaction>
        </bizTransactionList>
      </ObjectEvent>
    </EventList>
  </EPCISBody>
</epcis:EPCISDocument>
---------------------------------------------------------------------------

  In order to submit this EPCIS event to the repository you may take advantage
  of <<<CaptureClient>>> class available from the <<<epcis-captureclient.jar>>>
  file. The capture client sends the EPCIS event to the repository using an
  HTTP POST request. The following Java code snippet shows how to do that:

---------------------------------------------------------------------------
// get the capture client and capture the event
String captureUrl = new String("http://localhost:8080/epcis-repository-[version]/capture");
CaptureClient client = new CaptureClient(captureUrl);
int httpResponseCode = client.capture(event);
if (httpResponseCode != 200) {
    System.out.println("The event could NOT be captured!");
}
---------------------------------------------------------------------------

  The HTTP response code you get back from the <<<CaptureClient>>> will be
  <<<200>>> if the event was successfully captured, or anything else if there
  were any problems.

  The event object required by the <<<CaptureClient>>>'s <<<capture>>> method
  can either be an XML <<<String>>>, an <<<InputStream>>> providing the XML as
  a stream of bytes, or an instance of <<<EPCISDocumentType>>>. The following
  code snippet demonstrates how to use the API to create an
  <<<EPCISDocumentType>>> instance:

---------------------------------------------------------------------------
ObjectEventType objEvent = new ObjectEventType();

// get the current time and set the eventTime
XMLGregorianCalendar now = null;
try {
    DatatypeFactory dataFactory = DatatypeFactory.newInstance();
    now = dataFactory.newXMLGregorianCalendar(new GregorianCalendar());
    objEvent.setEventTime(now);
} catch (DatatypeConfigurationException e) {
    e.printStackTrace();
}

// get the current time zone and set the eventTimeZoneOffset
if (now != null) {
    int timezone = now.getTimezone();
    int h = Math.abs(timezone / 60);
    int m = Math.abs(timezone % 60);
    DecimalFormat format = new DecimalFormat("00");
    String sign = (timezone < 0) ? "-" : "+";
    objEvent.setEventTimeZoneOffset(sign + format.format(h) + ":" + format.format(m));
}

// set EPCs
EPC epc = new EPC();
epc.setValue("urn:epc:id:sgtin:1.1.0");
EPCListType epcList = new EPCListType();
epcList.getEpc().add(epc);
objEvent.setEpcList(epcList);

// set action
objEvent.setAction(ActionType.ADD);

// set bizStep
objEvent.setBizStep("urn:accada:demo:bizstep:testing");

// set disposition
objEvent.setDisposition("urn:accada:demo:disp:testing");

// set readPoint
ReadPointType readPoint = new ReadPointType();
readPoint.setId("urn:accada:demo:rp:1.1");
objEvent.setReadPoint(readPoint);

// set bizLocation
BusinessLocationType bizLocation = new BusinessLocationType();
bizLocation.setId("urn:accada:demo:loc:1.1");
objEvent.setBizLocation(bizLocation);

// create the EPCISDocument containing a single ObjectEvent
EPCISDocumentType epcisDoc = new EPCISDocumentType();
EPCISBodyType epcisBody = new EPCISBodyType();
EventListType eventList = new EventListType();
eventList.getObjectEventOrAggregationEventOrQuantityEvent().add(objEvent);
epcisBody.setEventList(eventList);
epcisDoc.setEPCISBody(epcisBody);
epcisDoc.setSchemaVersion(new BigDecimal("1.0"));
epcisDoc.setCreationDate(now);
---------------------------------------------------------------------------



** {How to Query an EPCIS Repository}

   The Accada EPCIS repository implements the SOAP/HTTP binding for the query
   interface, thus, you need to send queries inside a valid SOAP request to the
   repository. A sample query asking for ObjectEvents having an EPC equal to
   'urn:epc:id:sgtin:1.1.0' looks like the following:

---------------------------------------------------------------------------
<epcisq:Poll xmlns:epcisq="urn:epcglobal:epcis-query:xsd:1">
  <queryName>SimpleEventQuery</queryName>
  <params>
    <param>
      <name>eventType</name>
      <value>
        <string>ObjectEvent</string>
      </value>
    </param>
    <param>
      <name>MATCH_epc</name>
      <value>
        <string>urn:epc:id:sgtin:1.1.0</string>
      </value>
    </param>
  </params>
</epcisq:Poll>
---------------------------------------------------------------------------

   This XML query must be wrapped into a SOAP request prior to sending it to
   the repository's query interface. A Java code snippet which uses the
   <<<QueryControlClient>>> class from the <<<epcis-queryclient.jar>>> library
   to send the query to the repository looks as follows:

---------------------------------------------------------------------------
// get the query client and poll the query
String queryUrl = "http://localhost:8080/epcis-repository-[version]/query";
QueryControlClient client = new QueryControlClient(queryUrl);
QueryResults results = client.poll(query);

// check results of query
results.getResultsBody(); // etc.
---------------------------------------------------------------------------

  The <<<QueryResults>>> object returned by the <<<poll>>> method of the
  <<<QueryControlClient>>> class can be used to inspect the query results.

  The query object required by the <<<QueryControlClient>>>'s <<<poll>>> method
  can either be an XML <<<String>>>, an <<<InputStream>>> providing the XML as
  a stream of bytes, or an instance of <<<Poll>>>. The following code snippet
  demonstrates how to use the API to create a <<<Poll>>> instance:

---------------------------------------------------------------------------
// construct the query parameters
QueryParam queryParam1 = new QueryParam();
queryParam1.setName("eventType");
ArrayOfString queryParamValue1 = new ArrayOfString();
queryParamValue1.getString().add("ObjectEvent");
queryParam1.setValue(queryParamValue1);

QueryParam queryParam2 = new QueryParam();
queryParam2.setName("MATCH_epc");
ArrayOfString queryParamValue2 = new ArrayOfString();
queryParamValue2.getString().add("urn:epc:id:sgtin:1.1.0");
queryParam2.setValue(queryParamValue2);

// add the query parameters to the list of parameters
QueryParams queryParams = new QueryParams();
queryParams.getParam().add(queryParam1);
queryParams.getParam().add(queryParam2);

// create the Poll object
Poll poll = new Poll();
poll.setQueryName("SimpleEventQuery");
poll.setParams(queryParams);
---------------------------------------------------------------------------



** {How to Use a Query Schedule}

   The EPCIS repository offers standing queries that are run every once in a
   while. In order to subscribe such a query, the client must submit the query
   definition along with a query schedule to the repository. Because the use of
   a <<<QuerySchedule>>> is somewhat tricky, we describe it here and provide
   some quick examples.

   A <<<QuerySchedule>>> contains different fields for different time units. If
   such a field is set, the query will be executed whenever time reaches the
   value specified by that field. The following examples (taken from the EPCIS
   specification) illustrate the use of a <<<QuerySchedule>>>:

   * Example Schedule 1

     * <<<second=0>>>

     * <<<minute=0>>>

     * <all other fields omitted>

     []

     A query associated with this schedule will run once per hour, at the top
     of the hour (the <<<hour>>> field is omitted, meaning to run the query
     every hour, and the <<<second>>> and <<<minute>>> fields are set to 0,
     meaning to run the query at the top of every hour).

   * Example Schedule 2

     * <<<second=0>>>

     * <<<minute=0>>>

     * <<<dayOfWeek=[1-5]>>>

     []

     A query associated with this schedule will be executed once per hour, at
     the top of the hour, but only on weekdays (days 1 through 5 in a week).



** {How to Subscribe a Scheduled Query}

   A query may be associated with a query schedule (see above) and can be
   subscribed to the repository. This query will be executed whenever the
   schedule times out.

   A query subscription with the schedule from example 1, and the query from
   the section above would look like this:

---------------------------------------------------------------------------
<epcisq:Subscribe xmlns:epcisq="urn:epcglobal:epcis-query:xsd:1">
  <queryName>SimpleEventQuery</queryName>
  <params>
    <param>
      <name>eventType</name>
      <value>
        <string>ObjectEvent</string>
      </value>
    </param>
    <param>
      <name>MATCH_epc</name>
      <value>
        <string>urn:epc:id:sgtin:1.1.0</string>
      </value>
    </param>
  </params>
  <dest>http://localhost:8888/</dest> <!-- this is where query results will be delivered to -->
  <controls>
    <schedule>
      <second>0</second>
      <minute>0</minute>
    </schedule>
    <initialRecordTime>2008-03-16T00:00:00+01:00</initialRecordTime>
    <reportIfEmpty>false</reportIfEmpty>
  </controls>
  <subscriptionID>mySubscrId001</subscriptionID>
</epcisq:Subscribe>
---------------------------------------------------------------------------

   This scheduled query can now be subscribed to the repository as follows:

---------------------------------------------------------------------------
// get the query client and subscribe the query
String queryUrl = "http://localhost:8080/epcis-repository-[version]/query";
QueryControlClient client = new QueryControlClient(queryUrl);
client.subscribe(query);
---------------------------------------------------------------------------

   The results of the query once it is executed are delivered via the query
   callback interface (see below).

   The query object required by the <<<subscribe>>> method of the
   <<<QueryControlClient>>> class must be either an XML <<<String>>>, an
   <<<InputStream>>> providing the XML as a stream of bytes, or an instance of
   <<<Subscribe>>>.

   To unsubscribe the query simply provide the query's subscription ID to the
   <<<unsubscribe>>> method of the <<<QueryControlClient>>> class:

---------------------------------------------------------------------------
// the id of the subscribed query
String queryId = "mySubscrId001";
client.unsubscribe(queryId);
---------------------------------------------------------------------------

   Note: If no new data is available since the last execution of a subscribed
   query, the repository will either send an empty result list back to the
   client or will not send anything at all. The desired behaviour can be
   configured with the <<<reportIfEmpty>>> flag (see the EPCIS specification
   for details).


** {How to Subscribe a Triggered Query}

   A triggered query is much like a scheduled query, except that it is
   associated with a trigger instead of a schedule. In Accada's EPCIS
   repository, triggers are implemented as subscribed queries. This
   subscribed query, executed every couple of seconds, checks if incoming
   event data matches the trigger condition. If this condition is met, the
   trigger fires, and the query associated with the trigger will be executed.
   
   The schedule which determines in what time intervals to check for the trigger
   condition can be configured in the repository's <<<application.properties>>>
   file, see the next section.

   A query subscription with a trigger could look as follows:

---------------------------------------------------------------------------
<epcisq:Subscribe xmlns:epcisq="urn:epcglobal:epcis-query:xsd:1">
  <queryName>SimpleEventQuery</queryName>
  <params>
    <param>
      <name>eventType</name>
      <value>
        <string>ObjectEvent</string>
      </value>
    </param>
    <param>
      <name>MATCH_epc</name>
      <value>
        <string>urn:epc:id:sgtin:1.1.0</string>
      </value>
    </param>
  </params>
  <dest>http://localhost:8888/</dest> <!-- this is where query results will be delivered to -->
  <controls>
   <trigger>urn:epc:id:sgtin:0614141.107340.1</trigger>
   <initialRecordTime>2007-04-25T11:33:00.000+02:00</initialRecordTime>
   <reportIfEmpty>false</reportIfEmpty>
  </controls>
  <subscriptionID>mySubscrId002</subscriptionID>
</epcisq:Subscribe>
---------------------------------------------------------------------------


** {How to Use the Query Callback Interface}

   After subscribing a query, the EPCIS repository will deliver results of
   query executions through the Query Callback Interface. The query results
   will be deliverd as HTTP POST request to the URL specified by the <<<dest>>>
   parameter in the query subscription. It is the client's responsibility to
   listen for the response at the given URL.

   The <<<QueryCallbackListener>>> class of the <<<epcis-commons.jar>>> library
   implements a very simplistic HTTP server. It listens for requests to a given
   URL, catches any incoming POST data, and delivers it to an application upon
   request. The listener can be used as follows:

+----------------------------------------------------------------------------+
QueryCallbackListener listener = QueryCallbackListener.getInstance();
if (!listener.isRunning()) {
    listener.start();
}
synchronized (listener) {
    try {
        listener.wait(timeout);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
}
String response = listener.fetchResponse();
+----------------------------------------------------------------------------+

   In this code, the <<<wait()>>> method waits until either the listener
   receives a response or the specified <<<timeout>>> has elapsed.




* {Runtime Configuration of your EPCIS Repository}

  In this section, we describe the properties you can use to configure Accada's
  EPCIS repository implementation.

  Basically there are three coniguration files relevant to the user of the
  application: <<<application.properties>>>, <<<context.xml>>>, and
  <<<log4j.properties>>>

  ** <<application.properties>>

  The <<<application.properties>>> file is located in the application's class
  path at <<<TOMCAT_HOME/webapps/epcis-repository-\<version\>/WEB-INF/classes>>>.
  It contains the basic configuration directives that control the repository's
  basic behaviour when processing queries and events. The file is reproduced
  here:

---------------------------------------------------------------------------
# application.properties - various properties (loaded at runtime)

# the version of this service, as exposed by getVendorVersion (must be valid URI)
service.version=http://www.accada.org/epcis/epcis-repository-<version>

# maximum number of result rows allowed for a single query before a
# QueryTooLarge exception is raised
maxQueryResultRows=1000

# maximum time in milliseconds to wait for a query to finish before a
# QueryTooComplex exception is raised
maxQueryExecutionTime=20000

# whether to allow inserting new vocabularies when they are missing in the db
insertMissingVoc=true

# the schedule used to check for trigger conditions - the values provided here
# are parsed into a query schedule which is used to periodically check whether
# incoming events contain a specific trigger URI
trigger.condition.check.sec=0,20,40
trigger.condition.check.min=

# whether to allow resetting the database via a HTTP POST 'dbReset' parameter
dbResetAllowed=false
dbResetScript=/sql/epcis_test_data_reset.sql

# the location of the EPCglobal EPCIS schema
epcisSchemaFile=/wsdl/EPCglobal-epcis-1_0.xsd

# whether to trust a certificate whose certificate chain cannot be validated
# when delivering results via Query Callback Interface
trustAllCertificates=false

# the name of the JNDI data source holding the connection to the database
jndi.datasource.name=java:comp/env/jdbc/EPCISDB

# the address where the EPCIS query Web service will be available
ws.query.address=/query
---------------------------------------------------------------------------

  We would like to outline one specific feature here: The Accada EPCIS
  implementation includes the option to specify an SQL script (see
  <dbResetScript> property) and trigger the execution of this script remotely.
  This behaviour is not part of the EPCIS specification, but rather can be used
  to remotely initialize a repository to a predefined state. The script is
  triggered by sending an HTTP POST request to the capture interface with the
  HTTP parameter <dbReset> set to <true>. Please note that this feature is not
  protected by any security mechanisms. It is intended for internal use only
  and therefore disabled by default (future versions may provide more
  sophisticated remote management capabilities).

  ** <<context.xml>>

  The definitions in the <<<context.xml>>> file includes the configuration
  parameters for the database connection. The file is reproduced below:

---------------------------------------------------------------------------
<?xml version="1.0" encoding="ISO-8859-1"?>
<Context reloadable="true">

  <Resource
    name="jdbc/EPCISDB"
    type="javax.sql.DataSource"
    auth="Container"
    username="epcis"
    password="epcis"
    driverClassName="com.mysql.jdbc.Driver"
    defaultAutoCommit="false"
    url="jdbc:mysql://localhost:3306/epcis1?autoReconnect=true">
  </Resource>

</Context>
---------------------------------------------------------------------------

  This file is located at
  <<<TOMCAT_HOME/webapps/epcis-repository-\<version\>/META-INF/>>>, but as
  indicated before, once your application has been deployed, Tomcat reads these
  configuration settings from the file at
  <<<conf/Catalina/localhost/epcis-repository-\<version\>.xml>>>.

  ** <<log4j.properties>>

  This file is also located in the application's class path at
  <<<TOMCAT_HOME/webapps/epcis-repository-\<version\>/WEB-INF/classes>>>.
  The properties defined here affect the logging behaviour of the application.
  The log file will be written to <<<TOMCAT_HOME/logs/epcis-repository.log>>>
  and by default only include log statements of level INFO and higher. To get
  more detailed information written to the log file, e.g., the contents of
  incoming soap requests, uncomment the corresponding entries in the file as
  reproduced below:

---------------------------------------------------------------------------
# LOG4J configuration

# default logging
log4j.rootCategory=INFO, LOGFILE

# customize logging levels
#log4j.logger.org.accada.epcis=DEBUG

# enable logging of SQL prepared statements
#log4j.logger.org.hibernate.SQL=FINE
#log4j.logger.org.hibernate.type=FINE

# enable logging of incoming/outgoing SOAP requests/responses
#log4j.logger.org.apache.cxf.interceptor.LoggingInInterceptor=INFO
#log4j.logger.org.apache.cxf.interceptor.LoggingOutInterceptor=INFO

# logging to file
log4j.appender.LOGFILE=org.apache.log4j.DailyRollingFileAppender
log4j.appender.LOGFILE.File=${catalina.base}/logs/epcis-repository.log
log4j.appender.LOGFILE.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayout
log4j.appender.LOGFILE.layout.ConversionPattern=%5p (%d{yyyy-MM-dd HH:mm:ss,SSS}) [%C:%L] - %m%n
---------------------------------------------------------------------------
