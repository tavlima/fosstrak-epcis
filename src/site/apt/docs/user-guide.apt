              -------------------
              User Guide
              -------------------
              Marco Steybe, Andrea Groessbauer
              -------------------
              03/06/2007
              -------------------

User Guide

* Contents

   [[1]] {{{#About}About this Guide}}

   [[1]] {{{#Getting}Getting Started}}

   [[1]] {{{#Configuring}Configuring Accada EPCIS Clients}}

   [[1]] {{{#How}How to use}}


* {About} this Guide

  The Accada EPCIS User Guide is intended to help those who whish to 
  incorporate Accada's EPCIS Repository implementation into their project 
  to provide a means of persistence for EPC-related data.

* {Getting} Started

  For those who just want to see Accada's EPCIS Repository in action and explore
  its features and functionalities may simply start our Query and/or Capture Client
  Applications through Java Web Start available at the {{{../demo.html}demo page}}.

** Use Accada's EPCIS Repository

  If you intend to use our running EPCIS Repository available at 
  {{http://demo.accada.org/}} for testing or prototyping your own clients you
  may send HTTP POST and Web service requests according to the EPCIS specification
  to the following URLs:

  * Capture Interface (HTTP binding): {{http://demo.accada.org/EPCIS-Capture-v0.2.0}}

  []

  * Query Interface (SOAP binding): {{http://demo.accada.org/EPCIS-Query-v0.2.0}}

** Setup your own EPCIS Repository

   In order to setup an EPCIS Repository using our implementation, you need to
   get the epcis-repository WAR file from our {{{download.html}download page}}
   and simply place it into your Tomcat's webapp directory. After restarting
   Tomcat, the WAR file will be exploded and the Repository is ready for use.

   Note: You will also need to have a properly configured database running. For
   more information on configuration, deployment, and execution please consult
   the {{{dev-guide.html}Developer's Guide}}.

** Use Accada's EPCIS Capture Client to send events to an EPCIS Repository

   Download the capture client binaries from the {{{download.html}download page}}
   and run the contained executable JAR file. This will launch the Accada EPCIS
   Capture Client. In the GUI you need to specify the URL of the EPCIS Repository
   you wish to connect to in order to start sending EPCIS events.

   If you intend to use our capture client library for use in your Java project
   you should refer to the
   {{{architecture.html#EPCIS%20Capture%20Application}architecture description}}.

** Use Accada's EPCIS Query Client to browse an EPCIS Repository

   Download the query client binaries from the {{{download.html}download page}}
   and follow the same steps as above.

   If you intend to use our query client library for use in your Java project
   you should refer to the
   {{{architecture.html#EPCIS%20Query%20Application}architecture description}}.


* {Configuring} Accada EPCIS Clients

  There is really not much to configure in the Capture and Query Clients. All
  there is is the default URLs to use when the client is connecting to the
  Repository. The properties to set can be found in the JAR archive of the
  downloaded binaries or in the <<<src\main\resources>>> directory of the
  project modules respectively.

* {How} to use

  This section provides some basic information on how to use some fundamental
  features of Accada's EPCIS Repository implementation.

** How to use a Query Schedule

   Subscibing a query to the repository to have it run every once in a while
   requires submitting a query schedule together with the query to be executed.
   The use of a QuerySchedule is somewhat tricky so we describe it here and
   provide some quick examples.
   
   A <<<QuerySchedule>>> contains different fields for different time units,
   e.g. a <seconds> field to specify in which seconds of a minute the query
   should be executed. Whenever a field is set to some values the query will
   be executed when time reaches the given values. If a field is omitted the
   query will be executed every unit of this field, i.e. if all the fields
   in a schedule are omitted the query will be executed every second.
   
   Here are two examples (taken from the EPCIS specification) for a
   <<<QuerySchedule>>>:
   
   * Example Schedule 1

     * <<<second=0>>>
     
     * <<<minute=0>>>
     
     * <all other fields omitted>
     
     []
     
     This schedule tells to run the query once per hour, at the top of the hour
     because the <<<hour>>> field is omitted, meaning to run the query every
     hour, and the <<<second>>> and <<<minute>>> fields must be 0, meaning to
     run the query at the top of every hour.
   
   * Example Schedule 2

     * <<<second=0>>>

     * <<<minute=0>>>

     * <<<dayOfWeek=[1-5]>>>
     
     []
     
     The query with this schedule will be executed once per hour, at the top of
     the hour, but only on weekdays (days 1 through 5 in a week).

   []

   Note: The repository will send an empty result set back to the client or may
   not send anything at all depending on whether new event data is available since
   the last execution of a subscribed query if the <<<reportIfEmpty>>> flag is set.
   
   

** How to use the Query Callback Interface

   After subscribing a query, the EPCIS Repository will deliver results of query
   execution through the Query Callback Interface by invoking the dedicated
   commands, e.g. <<<callbackResults(QueryResults)>>>. Accada's EPCIS Repository
   implements the HTTP Binding of the Query Callback Interface and thus delivers 
   query results by sending an HTTP POST request to the URI specified by the 
   <<<dest>>> parameter.
   
   That is, when subscribing a query you must specify an HTTP URL in the form of
   <<<http://host:port/remainder-of-url>>> as the <<<dest>>> parameter. Our 
   implementation will POST query results upon execution of the subscribed query
   to the given URL. It is your responsibility to listen for the response at the
   given URL, accept it, and assign it to the corresponding query (the
   <<<subscriptionID>>> is part of the <<<QueryResults>>> object).
   
   To facilitate this task we have implemented a very simple
   <<<QueryCallbackClient>>> which just listens for requests to a given URL,
   caches any incoming POST data and delivers it to an application upon request.
   You can also take a look at the <<<QueryCallbackListener>>> in epcis-commons,
   where you will find a simple web server implementation listening for incoming
   calls from the EPCIS Query Callback Interface. The listener can be used like
   this:
   
+----------------------------------------------------------------------------+
QueryCallbackListener listener = QueryCallbackListener.getInstance();
if (!listener.isRunning()) {
    listener.start();
}
synchronized (listener) {
    try {
        listener.wait(timeout);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
}
String response = listener.fetchResponse();
+----------------------------------------------------------------------------+

   This is actually the code we use for running the tests that involve the
   Query Callback Interface. The <<<wait()>>> method waits until either the 
   listener received a response or the specified <<<timeout>>> has elapsed.
