              -------------------
              User Guide
              -------------------
              Marco Steybe, Andrea Groessbauer, Christof Roduner
              -------------------
              04/23/2007
              -------------------

User Guide

* Contents

   [[1]] {{{#About}About this Guide}}

   [[2]] {{{#Getting}Getting Started}}
   
   [[3]] {{{#Configuration}Runtime Configuration of EPCIS Repository}}

   [[4]] {{{#Basic}Basic Features}}

   [[5]] {{{#Advanced}Advanced Features}}


* {About} this Guide

  The Accada EPCIS User Guide is intended to help those who whish to 
  incorporate Accada's EPCIS Repository implementation into their project 
  to provide a means of persistence for EPC-related data.

* {Getting} Started

  If you just want to see Accada's EPCIS Repository in action and explore
  its features and functionalities, you might want to try out our Query and/or Capture Client
  Applications (available through Java Web Start on the {{{../demo.html}demo page}})
  without setting up your own repository. If, however, you want to run your own instance of
  the EPCIS Repository, proceed with the next section of this guide.
  

** Setup your own EPCIS Repository

  In order to setup your own EPCIS Repository, perform the following steps:

   [[1]] Make sure you have have a {{{http://dev.mysql.com/downloads/mysql/5.0.html}MySQL server}}
   (version 5.0 or higher) running. It will be used by the EPCIS Repository
   to store event data.

   [[2]] {{{../download.html}Download}} the <Accada EPCIS Repository> distribution
   and place the WAR file contained in the archive in your Tomcat's <webapp>
   directory. After restarting Tomcat, the WAR file will be exploded.
   
   [[3]] Setup a {MySQL} database for the EPCIS Repository to use.
 
         Log into the MySQL Command Line Client as <root> and perform the
         following steps:
 
     [[a]] Create the database (in this example, we'll use <epcis> as a database name).

-----------------------------
mysql> CREATE DATABASE epcis;
-----------------------------

     [[b]] Create a user that is allowed to access the newly created database
     (in this example, we'll use the user name <epcis> and password <epcis>).
     
--------------------------------------------------------------------------------------
mysql> GRANT SELECT, INSERT, UPDATE, DELETE ON epcis.* TO epcis IDENTIFIED BY 'epcis';
--------------------------------------------------------------------------------------

     [[c]] Create the database schema by running the setup script contained
     in the archive you downloaded. (Make sure you're connected to the newly
     created database before running the script.)

----------------------------------------------------------
mysql> USE epcis;
mysql> source <path-to-unpacked-download>/epcis_schema.sql
----------------------------------------------------------

     [[d]] Optionally populate the repository with some sample data.

-------------------------------------------------------------
mysql> source <path-to-unpacked-download>/epcis_demo_data.sql
-------------------------------------------------------------

   [[4]] Configure the repository to connect to the newly created database.

        In a default installation of Tomcat, the database connection settings
        can be found in <<<$TOMCAT_HOME/conf/Catalina/localhost/epcis-repository-\<version\>.xml>>>.
        The relevant attributes that must be adjusted are <username>, <password>, and <url>.

---------------------------------------------------------------------------
<Resource
    name="jdbc/EPCISDB"
    type="javax.sql.DataSource"
    auth="Container"
    username="epcis"
    password="epcis"
    driverClassName="com.mysql.jdbc.Driver"
    url="jdbc:mysql://localhost:3306/epcis?autoReconnect=true">
</Resource>
-----------------------------------------------------------------------------

   [[5]] Restart Tomcat.

        In a default installation of Tomcat, the capture interface will now be
        available at
        <<<http://localhost:8080/epcis-repository-\<version\>/capture>>>, while the
        query interface will be available at
        <<<http://localhost:8080/epcis-repository-\<version\>/services/EPCglobalEPCISService>>>.

        Proceed to the next sections to test your repository installation using one
        of our client applications.

** Use Accada's EPCIS Capture Client to send events to an EPCIS Repository

   [[1]] {{{download.html}Download}} the capture client binaries.

   [[2]] Run the executable JAR file contained in the archive you downloaded.
   This will launch the Accada EPCIS Capture Client. 
   
-------------------------------------------
java -jar epcis-captureclient-<version>.jar
-------------------------------------------

   [[3]] In the GUI, you need to specify the URL of the EPCIS Repository you
   want to connect to. You can either use your local repository instance
   (e.g., <<<http://localhost:8080/epcis-repository-\<version\>/capture>>>>) or
   our public repository (<<<http://demo.accada.org/epcis/capture>>>). You can
   now fill in event data and submit the EPCIS event to the repository for
   capturing.

   []

   If you intend to use our capture client library in your own Java
   project, you should refer to the
   {{{architecture.html#EPCIS%20Capture%20Client}architecture description}}.


** Use Accada's EPCIS Query Client to browse an EPCIS Repository

   {{{download.html}Download}} the query client binaries and follow the same
   steps as above.

   If you intend to use our query client library in your own Java
   project, you should refer to the
   {{{architecture.html#EPCIS%20Query%20Client}architecture description}}.



* Runtime {Configuration} of EPCIS Repository

  In this section, we describe the properties you may use to configure Accada's
  EPCIS Repository implementation.
  
  The following configuration files reside in the
  <<<epcis-repository/src/main/webapp/META-INF/>>> directory and describe the
  default configuration:

  * <<application.properties>>

    The <<<application.properties>>> file is located in your Tomcat's <<<webapps/epcis-repository-\<version\>/META-INF/>>>
    directory. It contains some basic configuration directives that control the
    repository's basic behaviour when processing queries and new events.

---------------------------------------------------------------------------
# application.properties

# maximum number of result rows allowed for a single query before a
# QueryTooLarge exception is raised
maxQueryResultRows=125

# maximum time in milliseconds to wait for a query to finish before a
# QueryTooComplex exception is raised
maxQueryExecutionTime=20000

# whether to insert new vocabularies when they are missing in the db
insertMissingVoc=true

# the schedule used to check for trigger conditions. the values provided
# here are parsed into a query schedule which is used to periodically
# check whether incoming events contain a specific trigger URI
trigger.condition.check.sec=0,20,40
trigger.condition.check.min=
---------------------------------------------------------------------------

    You do not need to manually restart Tomcat after editing this file as
    it is monitored by the application server and a restart is initiated
    automatically after any changes.


  * <<context.xml>>

    The <<<context.xml>>> file is located in your Tomcat's <<<webapps/epcis-repository-\<version\>/META-INF/>>>
    directory. The main options you can configure here are the database
    connection details of the storage backend you want the repository to use.
    
    Moreover, you can specify a script containing SQL statements (<dbResetScript>) that is
    executed by the repository whenever it receives a HTTP POST request at the capture
    interface with the HTTP parameter <dbReset> set to <true>. This behaviour is not
    part of the EPCIS specification. It can be used to remotely initialize a repository to
    a predefined state. Please note that this feature is not protected by any security
    mechanisms. It is intended for internal use only and therefore disabled by default
    (i.e., the <dbResetAllowed> parameter is set to <false> in <<<context.xml>>>).
    (Future versions may provide more sophisticated remote management capabilities.)
    
    The other parameters in <<<context.xml>>> specify the location of specific files
    and need not be changed.

---------------------------------------------------------------------------
<?xml version="1.0" encoding="ISO-8859-1"?>
<Context docBase="" path="/epcis-repository" reloadable="true">

  <Parameter name="schemaPath" value="WEB-INF/classes/wsdl"/>
  <Parameter name="schemaFile" value="EPCglobal-epcis-1_0.xsd"/>

  <Parameter name="log4jConfigFile" value="META-INF/log4j.properties"/>
  <Parameter name="appConfigFile" value="META-INF/application.properties"/>

  <!-- Allow remote clients to invoke the database reset script (see
       parameter "dbResetScript). -->
  <Parameter name="dbResetAllowed" value="false"/>

  <!-- Script containing SQL statements to initialize repository to a
       predefined state. (Used for JUnit testing only.) -->
  <Parameter name="dbResetScript" value="WEB-INF/classes/sql/epcis_test_data_reset.sql"/>

  <Resource
    name="jdbc/EPCISDB"
    type="javax.sql.DataSource"
    auth="Container"
    username="epcis"
    password="epcis"
    driverClassName="com.mysql.jdbc.Driver"
    url="jdbc:mysql://localhost:3306/epcis?autoReconnect=true">
  </Resource>

  <WatchedResource>WEB-INF/web.xml</WatchedResource>
  <WatchedResource>META-INF/context.xml</WatchedResource>
  <WatchedResource>META-INF/application.properties</WatchedResource>
</Context>
---------------------------------------------------------------------------

    Please note that, once your webapp has been deployed, Tomcat reads these configuration
    settings from the file <<<conf/Catalina/localhost/epcis-repository-\<version\>.xml>>>.

  * <<log4j.properties>>

    These properties affect the logging behaviour of the application. In a default
    installation, the logfile will be written to <<<epcis-repository.log>>> in your
    Tomcat's log directory.

  []



* {Basic} Features

  This section shows how to use the basic features of Accada's EPCIS Repository
  implementation, i.e. how to send an EPCIS event to the capture interface and
  how to create an EPCIS query for retrieving information from the repository.

** How to capture an EPCIS event

   In order to capture EPC data at the repository you need to wrap this data
   into XML conforming to the EPCIS XML schema for event types. This EPCIS event
   must then be sent as payload in an HTTP POST request to the repository's
   capture interface. An example event, an ObjectEvent, rendered into XML might
   look like this:

---------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<epcis:EPCISDocument
    xmlns:epcis="urn:epcglobal:epcis:xsd:1"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    creationDate="2005-07-11T11:30:47.0Z"
    schemaVersion="1">
  <EPCISBody>
    <EventList>
      <ObjectEvent>
        <eventTime>2007-04-25T11:33:00.000+02:00</eventTime>
        <eventTimeZoneOffset>+02:00</eventTimeZoneOffset>
        <epcList>
          <epc>urn:epc:id:sgtin:0614141.107346.2017</epc>
        </epcList>
        <action>OBSERVE</action>
        <bizStep>urn:epcglobal:epcis:bizstep:fmcg:shipped</bizStep>
        <disposition>urn:epcglobal:epcis:disp:fmcg:unknown</disposition>
        <readPoint>
          <id>urn:epc:id:sgln:0614141.07346.1234</id>
        </readPoint>
        <bizLocation>
          <id>urn:epcglobal:fmcg:loc:0614141073467.A23-49</id>
        </bizLocation>
        <bizTransactionList>
          <bizTransaction type="urn:epcglobal:fmcg:btt:po">
            http://transaction.acme.com/po/12345678
          </bizTransaction>
        </bizTransactionList>
      </ObjectEvent>
    </EventList>
  </EPCISBody>
</epcis:EPCISDocument>
---------------------------------------------------------------------------

  In order to programmatically send this EPCIS event to the repository you may
  take advantage of our capture client which takes care of the HTTP communication
  for you. All you need to do is read the event given in XML, use the client to
  send the event to the repository, and check its response. A corresponding
  Java code snippet might look like the following:

---------------------------------------------------------------------------
// read the event xml
Inputstream event = ...

// get the capture client and capture the event
CaptureClient client = new CaptureClient();
String httpResponse = client.capture(event);

// check response
System.out.println(httpResponse);
---------------------------------------------------------------------------

  If you like to do the HTTP communication yourself you can have a look at the
  <<<doPost>>> method of the <<<CaptureClient>>> class.


** How to query an EPCIS repository

   Because Accada's EPCIS Repository implements the SOAP/HTTP Binding for the
   query interface, you need to construct a query, wrap it into a SOAP request
   and send it to the repository. A sample query asking for ObjectEvents having
   a ReadPoint equal to 'urn:epc:id:sgln:0614141.07346.1234' looks like this:

---------------------------------------------------------------------------
<epcisq:poll xmlns:epcisq="urn:epcglobal:epcis-query:xsd:1">
  <queryName>SimpleEventQuery</queryName>
  <params>
    <param>
      <name>eventType</name>
      <value>
        <string>ObjectEvent</string>
      </value>
    </param>
    <param>
      <name>EQ_readPoint</name>
      <value>
        <string>urn:epcglobal:fmcg:loc:0614141073469.RP-1</string>
      </value>
    </param>
  </params>
</epcisq:poll>
---------------------------------------------------------------------------

   You can now wrap this query into a SOAP request and send it to the repository
   or you can use our query client which does all this for you:

---------------------------------------------------------------------------
// read the query subscription
Inputstream query = ...

// get the query client and poll the query
QueryControlClient client = new QueryControlClient();
QueryResults results = client.poll(query);

// check results of query
results.getResultsBody(); // etc.
---------------------------------------------------------------------------



* {Advanced} Features

  This section explains how to use the advanced features of Accada's EPCIS
  Repository implementation.

** How to use a Query Schedule

   The EPCIS Repository offers standing queries that are run every once in a
   while. In order to subscribe to such a query, the client must submit the
   query definition along with a query schedule to the repository. As the use
   of a <<<QuerySchedule>>> is somewhat tricky, we describe it here and provide
   some quick examples.

   A <<<QuerySchedule>>> contains different fields for different time units,
   e.g. a <seconds> field to specify in which seconds of a minute the query
   should be executed. If a field is set to some value, the query will
   be executed whenever the time given in that value is reached. If a field
   is omitted, the query will be executed whenever one unit of time (of the
   respective field) has passed. I.e., if all the fields in a schedule are
   omitted, the query will be executed every second.

   The following two examples (taken from the EPCIS specification) illustrate
   the use of a <<<QuerySchedule>>>:

   * Example Schedule 1

     * <<<second=0>>>

     * <<<minute=0>>>

     * <all other fields omitted>

     []

     A query associated with this schedule will run once per hour,
     at the top of the hour. (The <<<hour>>> field is omitted, meaning to run
     the query every hour, and the <<<second>>> and <<<minute>>> fields are set
     to 0, meaning to run the query at the top of every hour.)

   * Example Schedule 2

     * <<<second=0>>>

     * <<<minute=0>>>

     * <<<dayOfWeek=[1-5]>>>

     []

     A query associated with this schedule will be executed once per hour,
     at the top of the hour, but only on weekdays (days 1 through 5 in a week).

   []


** How to subscribe a Scheduled Query

   A query may be associated with a query schedule (see above) and can be
   subscribed to the repository. This query will be executed whenever the
   schedule times out.

   A query subscription with the schedule from example 1 would look like this:

---------------------------------------------------------------------------
<epcisq:Subscribe xmlns:epcisq="urn:epcglobal:epcis-query:xsd:1">
  <queryName>SimpleEventQuery</queryName>
  <params>
    <param>
      <name>eventType</name>
      <value>
        <string>ObjectEvent</string>
      </value>
    </param>
    <param>
      <name>EQ_readPoint</name>
      <value>
        <string>urn:epcglobal:fmcg:loc:0614141073469.RP-1</string>
      </value>
    </param>
  </params>
  <dest>http://localhost:8888/</dest> <!-- this is where query results will be delivered to -->
  <controls>
    <schedule>
      <second>0</second>
      <minute>0</minute>
    </schedule>
    <initialRecordTime>2007-04-25T11:33:00.000+02:00</initialRecordTime>
    <reportIfEmpty>false</reportIfEmpty>
  </controls>
  <subscriptionID>mySubscrId001</subscriptionID>
</epcisq:Subscribe>
---------------------------------------------------------------------------

   This scheduled query can then be subscribed at the repository as follows:

---------------------------------------------------------------------------
// read the query
Inputstream query = ...

// get the query client and subscribe the query
QueryControlClient client = new QueryControlClient();
QueryResults results = client.subscribe(query);
---------------------------------------------------------------------------

   The results of the query once it is executed are delivered via the query
   callback interface (see below).

   To unsubscribe the query do the following:

---------------------------------------------------------------------------
// the id of the subscribed query
String queryId = "mySubscrId001";

// get the query client and unsubscribe
QueryControlClient client = new QueryControlClient();
client.unsubscribe(queryId);
---------------------------------------------------------------------------

   Note: If no new data is available since the last execution of a subscribed
   query, the repository will either send an empty result set back to the
   client or will not send anything at all. The desired behaviour can be
   configured with the <<<reportIfEmpty>>> flag.


** How to subscribe a Triggered Query

   A triggered query is much like a scheduled query except that it is associated
   with a trigger instead of a schedule. In Accada's EPCIS repository, triggers
   are implemented as subscribed queries. This subscribed query, executed every
   couple of seconds, checks if incoming event data matches the trigger condition.
   If this condition is met, the trigger fires, and the query associated with
   the trigger will be executed.
   
   The schedule which determines in what time intervals to check for the trigger
   condition can be configured in properties.

   A query subscription with a trigger would look as follows:

---------------------------------------------------------------------------
<epcisq:Subscribe xmlns:epcisq="urn:epcglobal:epcis-query:xsd:1">
  <queryName>SimpleEventQuery</queryName>
  <params>
    <param>
      <name>eventType</name>
      <value>
        <string>ObjectEvent</string>
      </value>
    </param>
    <param>
      <name>EQ_readPoint</name>
      <value>
        <string>urn:epcglobal:fmcg:loc:0614141073469.RP-1</string>
      </value>
    </param>
  </params>
  <dest>http://localhost:8888/</dest> <!-- this is where query results will be delivered to -->
  <controls>
   <trigger>urn:epc:id:sgtin:0614141.107340.1</trigger>
   <initialRecordTime>2007-04-25T11:33:00.000+02:00</initialRecordTime>
   <reportIfEmpty>false</reportIfEmpty>
  </controls>
  <subscriptionID>mySubscrId002</subscriptionID>
</epcisq:Subscribe>
---------------------------------------------------------------------------


** How to use the Query Callback Interface

   After subscribing a query, the EPCIS Repository will deliver results of query
   execution through the Query Callback Interface by invoking the dedicated
   commands, e.g. <<<callbackResults(QueryResults)>>>. Accada's EPCIS Repository
   implements the HTTP binding of the Query Callback Interface and thus delivers 
   query results by sending an HTTP POST request to the URI specified by the 
   <<<dest>>> parameter.

   That is, a query subscription must contain an HTTP URL in the form of
   <<<http://host:port/remainder-of-url>>> as a subsription parameter. The
   following image is an excerpt from the Query Client GUI and shows where to
   specify the destination URL:

[../images/gui_destfield.png]

   Our implementation will then POST query results upon execution of the
   subscribed query to this destination URL. It is the client's responsibility to
   listen for the response at the given URL, accept it, and assign it to the
   corresponding query (the <<<subscriptionID>>> is part of the
   <<<QueryResults>>> object).

   To facilitate this task, we have implemented a very simple
   <<<QueryCallbackClient>>>, which listens for requests to a given URL,
   catches any incoming POST data, and delivers it to an application upon request.
   You can also take a look at the <<<QueryCallbackListener>>> in the
   <epcis-commons> sub-module, where you will find a simple web server
   implementation listening for incoming calls from the EPCIS Query Callback
   Interface. The listener can be used like this:

+----------------------------------------------------------------------------+
QueryCallbackListener listener = QueryCallbackListener.getInstance();
if (!listener.isRunning()) {
    listener.start();
}
synchronized (listener) {
    try {
        listener.wait(timeout);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
}
String response = listener.fetchResponse();
+----------------------------------------------------------------------------+

   This is actually the code we use for running the tests that involve the
   Query Callback Interface. The <<<wait()>>> method waits until either the 
   listener receives a response or the specified <<<timeout>>> has elapsed.
