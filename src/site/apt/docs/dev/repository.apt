Developer Guide

* Repository

[../../images/repository.png]

** {QueryOperationsModule}
  
  EPCIS Query Interface implementation. Converts the invocations from axis to SQL queries and returns the results to axis. Implementation is highly specific to the database schema, so <<beware>>. The responses generated by the server stubs are EPCIS standard compliant. However, the results will always be ordered according to type, not in random order as the standard would allow. Our 'client', however, will only work with our server, because it relies on the fact that the answers are <<ordered>>. Using it with servers that do not order the results may lead to arbitrary behaviour of our client (most likely lost results).
  All the data queried must first be captured through the capture interface. With one exception: Masterdata.

** CaptureOperationsModule

  EPCIS Capture Interface implementation. Converts the invocations from axis to SQL queries. All data must enter the repository through this interface. Masterdata cannot be inserted by this interface, as it is not yet specified in the EPCIS v1.0 specification.
  Beware that there are no means to delete the events through this interface as it is required by the specification.

** QueryInitHandler and QueryPostHandler

  Upon the arriavel of a SOAP message it is processed according to a handler chain. In our implementation there are two handlers: one for pre-pocessing and one for post-processing.

+---------------------------------------------------------------------------------------------------------+

         +--------------+    +---------+    +--------------+
msg  ->  | init handler | -> | service | -> | post handler |
         +--------------+    +---------+    +--------------+
+---------------------------------------------------------------------------------------------------------+

  The handlers may configured through the deployment descriptor (in the <<<server-config.wsdd>>> file).
  
  *** QueryInitHandler
  
    It collects information necessary for service execution such as
    
    * db connection properties
    
    * logging properties
    
    * scheduled subscriptions
    
    All this information is delivered to the service in the message context.
    The <<<QueryInitHandler>>> is responsible to clean up after a service crashes, undoing initialisation steps and returning an <<<AxisFault>>> message.
  
  *** QueryPostHandler
  
    This handler is invoked after a the service was completed successfully. It undoes the steps taken by the init handler to transfer it into the state it was in before the init handler was called. 

** QuerySubscriptionScheduled

  Represents a subscription associated with a query and a schedule. The query is invoked each time it times out. It has also an interface to delete a subscription. Triggered subscriptions are also scheduled queries: instead of checking on the paramters on every captured event we periodically schedule to check the trigger condition in the db. 
  
** QuerySubscription
  
  Represents a standing query. The subscription parameters are stored in the db. 


** {Schedule}

  A Schedule is defined by the <<<SubscriptionControls>>> parameters. It defines in what intervals a query (as indicated in the subscription parameters) is executed. 
  

** EventFieldExtension
  
  Allows to define new event parameters not specified in general as part of the extension mechanism.


