              -------------------
              Developer Guide
              -------------------
              Marco Steybe, Andrea Groessbauer
              -------------------
              03/06/2007
              -------------------

Developer Guide

* Contents

   [[1]] {{{#About}About this Guide}}

   [[1]] {{{#Getting}Getting Started}}

   [[1]] {{{#Project}Project Layout}}

   [[1]] {{{#Using}Using Maven}}

   [[1]] {{{#Configuring}Configuring Accada EPCIS Repository}}


* {About} this Guide

  This guide is intended for developers who wish to work on Accada's EPCIS
  Repository implementation. It outlines the steps to follow for setting up
  the development environment and helps developers to find their way through
  the code.


* {Getting} Started

  This section describes the setup of the development environment we use when
  working on Accada's EPCIS project.

** SVN Checkout

   First thing you need to do is checking out the code from the SVN repository.
   See {{{../source-repository.html}Source Repository}} on how to access the
   sources.

** Installing Tomcat

   We use {{{http://tomcat.apache.org/download-60.cgi}Apache Tomcat 6.x}} as
   the Web container for running Accada's EPCIS Repository. After installation
   it is important to check that you have the <<<CATALINA_HOME>>> environment
   variable set to the Tomcat root installation directory and that your
   <<<JAVA_HOME>>> environment variable points to a valid 1.5 JRE directory.
   
   The important notes here are the following two directories:
   
   * <<<$CATALINA_HOME/webapps>>> - the place where the application will be
     deployed
   
   * <<<$CATALINA_HOME/logs>>> - the place where the logfile for our application
     will be kept

** Installing MySQL

   For storing the EPC-related data we use a
   {{{http://dev.mysql.com/downloads/mysql/5.0.html}MySQL 5.0 Community Server}}
   instance.
   
   [[1]] After installation you can log into the MySQL Command Line Client
   as <<<root>>> and inject our database setup script like this:
   
-------------------------------------------------------------------------
source <path-to-trunk>/epcis-repository/src/main/sql/epcis_setup.sql
-------------------------------------------------------------------------
   
   This sql script adds a new user 'epcis' and a new database 'epcisdb' (these
   default names can be adjusted in the sql script). Alternatively you could
   use the MySQL Administrator shipped with the
   {{{http://dev.mysql.com/downloads/gui-tools/5.0.html}MySQL GUI Tools}} or
   any other database administration utility in order to setup a new user and
   database. (In the following we assume the defaults for user, password and databse names)
   
   [[2]] After you created a user and database, you need to load our database schema
   from <<<epcis-repository/src/main/sql/epcis_schema.sql>>> and inject it into
   MySQL as before, just make sure you are connected to the newly created db!

-------------------------------------------------------------------------
use epcisdb;

source <path-to-trunk>/epcis-repository/src/main/sql/epcis_schema.sql
-------------------------------------------------------------------------
   
   [[3]] The last step involves adjusting the database connection parameters in
   Tomcat's Context container, i.e. you need to specify db name, user, and
   password you created before in the following file:
   <<<epcis-repository/src/main/webapp/META-INF/context.xml>>>

---------------------------------------------------------------------------
<Resource
    name="jdbc/EPCISDB"
    type="javax.sql.DataSource"
    auth="Container"
    username="epcis"
    password="epcis"
    driverClassName="com.mysql.jdbc.Driver"
    url="jdbc:mysql://localhost:3306/epcisdb?autoReconnect=true">
</Resource>
-----------------------------------------------------------------------------

** Installing Maven

   We prefer to use {{{http://maven.apache.org/}Maven 2}} as our build tool.
   After installation you need to have the <<<M2_HOME>>> environment variable
   set to your Maven installation directory.


* {Project} Layout

  This section helps developers to find their way through the code.

** Project Modules

   Currently our Maven project includes five modules:

   * <<epcis-commons>>

     This module contains the common functionality (such as parsers) as well as
     the Axis generated code (which is used both by the epcis-repository and the
     epcis-queryclient modules).

   * <<epcis-captureclient>>

     This module consists of a Capture Client GUI and a simple Capture Client
     which sends EPC events (XML) through HTTP POST requests to the EPCIS
     Capture Interface.

   * <<epcis-queryclient>>

     This module consists of a Query Client GUI, the Query Callback Client and
     the Query Control Client which send queries to the EPCIS Query Interface
     using SOAP (Axis).

   * <<epcis-repository>>

     Here is the actual implementation of the EPCIS Repository.

   * <<epcis-interop-test>>

     This module contains interoperability tests.

   []
  
** Directory Layout
  
   We use the standard Maven directory layout as follows:

---------------------------------------------------------------------------
|
+-- pom.xml                             -> top-level POM file
|
+-- LICENSE.txt, README.txt
|
+-- src/
|   |
|   +-- config/                         -> top-level configuration files, like checkstyle configs
|   |
|   `-- site/                           -> project documentation
|
+-- epcis-captureclient/
|   ¦
|   '
|
+-- epcis-commons/
|   ¦
|   '
|
+-- epcis-interop-test/
|   ¦
|   '
|
+-- epcis-queryclient/
|   ¦
|   '
|
+-- epcis-repository/
|   |
|   +-- pom.xml                                    -> module POM file
|   |
|   `-- src/
|       |
|       +-- main/
|       |   |
|       |   +-- java/                              -> java source files
|       |   |
|       |   +-- resources/                         -> wsdl and xsd schema files
|       |   |
|       |   +-- sql/                               -> database scripts
|       |   |
|       |   `-- webapp/
|       |       |
|       |       +-- META-INF/
|       |       |   |
|       |       |   +-- application.properties     -> application properties
|       |       |   |
|       |       |   +-- context.xml                -> tomcat context properties
|       |       |   |
|       |       |   `-- log4j.properties           -> log4j properties
|       |       |
|       |       `-- WEB-INF/
|       |           |
|       |           +-- server-config.wsdd         -> axis web service deployment descriptor
|       |           |
|       |           `-- web.xml                    -> tomcat deployment descriptor
|       |
|       +-- site/                                  -> module documentation
|       |
|       `-- test/
|           |
|           `-- java/                              -> java unit test source files
|
`-- target/                                        -> generated contents
---------------------------------------------------------------------------


* {Using} Maven

  Using Maven as our build tool has several advantages like the easy integration
  of handy plugins. We use a Tomcat plugin for deployment, an Eclipse plugin for
  generating the Eclipse project, and a handfull of reporting plugins.

** Building

   For building the sources the following command is enough:

---------------------------------------------------------------------------
mvn compile
---------------------------------------------------------------------------

** Deployment

   For deploying/undeploying the Repository to/from Tomcat we use a Maven Tomcat
   plugin. This plugin communicates with the Tomcat Manager and thus requires
   the connection parameters which must be set in your settings.xml. Thus you
   must add a corresponding server block to <<<$M2_HOME/conf/settings.xml>>>:

---------------------------------------------------------------------------
<server>
  <id>tomcat-manager</id>
  <username>admin</username>
  <password>1234</password>
</server>
---------------------------------------------------------------------------

   With the following commands you can then do the deployment or undeployment. But before executing them, change to the epcis-repository directory, otherwise an error will be prompted. 

---------------------------------------------------------------------------
mvn tomcat:deploy

mvn tomcat:undeploy
---------------------------------------------------------------------------

** Eclipse Integration

   In order to work on the Accada EPCIS Repository using Eclipse, follow these
   instructions:

   [[1]] Eclipse needs to know the path to the local maven repository. Execute
         the following command to automatically set up the corresponding classpath
         variable <<<M2_REPO>>> accordingly:

---------------------------------------------------------------------------
mvn -Declipse.workspace=<path-to-eclipse-workspace> eclipse:add-maven-repo
---------------------------------------------------------------------------

   [[1]] For generating the <<<.project>>> and <<<.classpath>>> files used by
         Eclipse you should execute this command:

---------------------------------------------------------------------------
mvn -Dwtpversion=1.0 eclipse:eclipse
---------------------------------------------------------------------------

         Make sure you indicate the correct version of the Web Tools Project
         (WTP) you use in your Eclipse installation. <<<wtpversion=1.0>>> will
         work fine with WTP 1.5.x. and even works well for Eclipse without WTP.

   [[1]] Inside Eclipse import all the modules (from the menu bar, select
         File > Import > Existing Projects into Workspace).

** Site Generation

   The main Web site can be generated by using the following command:

---------------------------------------------------------------------------
mvn site -N
---------------------------------------------------------------------------
   
   In order to generate all module reports and to test the whole site navigation
   before an official deploy you can execute the following command which will
   generate the Web site under the given directory:

---------------------------------------------------------------------------
mvn site:stage -DstagingDirectory=d:\testsite
---------------------------------------------------------------------------


* {Configuring} Accada EPCIS Repository

  In this section we describe the properties you may use to configure Accada's
  EPCIS Repository implementation.
  
  The following configuration files reside in the
  <<<epcis-repository/src/main/webapp/META-INF/>>> directory and describe the
  default configuration:

  * <<application.properties>>

    Properties in here are reloaded when the application context is reloaded,
    i.e. changes to these values do not require a new deployment to Tomcat
    (in this case you need to change the deployed properties, i.e. inside
    <<<$CATALINA_HOME/webapps>>> and not in your working directory!).

---------------------------------------------------------------------------
# application.properties

# maximum number of result rows allowed for a single query before a
# QueryTooLarge exception is raised
maxQueryResultRows=125

# maximum time in milliseconds to wait for a query to finish before a
# QueryTooComplex exception is raised
maxQueryExecutionTime=20000

# whether to insert new vocabularies when they are missing in the db
insertMissingVoc=true

# the schedule for checking trigger conditions
trigger.condition.check.sec=0,20,40
trigger.condition.check.min=
---------------------------------------------------------------------------

  * <<context.xml>>

    The <<<context.xml>>> file describes the application context information
    used by Tomcat when the application is deployed. Parameters defined here
    are 'initial parameters' which are loaded at startup and thus changes to
    these values have no effect on the running application (you must redeploy)!

    In here you need to specify your database connection parameters. The other
    parameters specify the location of specific files and need not be changed.

---------------------------------------------------------------------------
<?xml version="1.0" encoding="ISO-8859-1"?>
<Context docBase="" path="/epcis-repository" reloadable="true">

  <Parameter name="schemaPath" value="WEB-INF/classes/wsdl"/>
  <Parameter name="schemaFile" value="EPCglobal-epcis-1_0.xsd"/>

  <Parameter name="log4jConfigFile" value="META-INF/log4j.properties"/>
  <Parameter name="appConfigFile" value="META-INF/application.properties"/>

  <Resource
    name="jdbc/EPCISDB"
    type="javax.sql.DataSource"
    auth="Container"
    username="epcis"
    password="epcis"
    driverClassName="com.mysql.jdbc.Driver"
    url="jdbc:mysql://localhost:3306/epcisdb?autoReconnect=true">
  </Resource>

  <WatchedResource>WEB-INF/web.xml</WatchedResource>
  <WatchedResource>META-INF/context.xml</WatchedResource>
  <WatchedResource>META-INF/application.properties</WatchedResource>
</Context>
---------------------------------------------------------------------------

  * <<log4j.properties>>

    These properties affect the logging behaviour of the application. Currently
    The logfile will be written to <<<$CATALINA_HOME/logs/epcis-repository.log>>>.

  []
