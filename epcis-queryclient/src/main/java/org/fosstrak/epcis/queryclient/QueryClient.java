package org.accada.epcis.queryclient;

/**
 * BEWARE OF UGLY HACK We had to do some modifications to the
 * EPCglobal-epcis.xsd file: <xsd:complexType name="EventListType"> <xsd:choice
 * maxOccurs="unbounded"> <xsd:element name="ObjectEvent"
 * type="epcis:ObjectEventType"/> <xsd:element name="AggregationEvent"
 * type="epcis:AggregationEventType"/> <xsd:element name="QuantityEvent"
 * type="epcis:QuantityEventType"/> <xsd:element name="TransactionEvent"
 * type="epcis:TransactionEventType"/> <xsd:element name="extension"
 * type="epcis:EPCISEventListExtensionType"/> <xsd:any namespace="##other"
 * processContents="lax"/> </xsd:choice> </xsd:complexType> had to be replaced
 * by <xsd:complexType name="EventListType"> <xsd:sequence> <xsd:element
 * name="ObjectEvent" type="epcis:ObjectEventType" minOccurs="0"
 * maxOccurs="unbounded"/> <xsd:element name="AggregationEvent"
 * type="epcis:AggregationEventType" minOccurs="0" maxOccurs="unbounded"/>
 * <xsd:element name="QuantityEvent" type="epcis:QuantityEventType"
 * minOccurs="0" maxOccurs="unbounded"/> <xsd:element name="TransactionEvent"
 * type="epcis:TransactionEventType" minOccurs="0" maxOccurs="unbounded"/>
 * <xsd:element name="extension" type="epcis:EPCISEventListExtensionType"
 * minOccurs="0" maxOccurs="unbounded"/> <xsd:any namespace="##other"
 * processContents="lax" minOccurs="0" maxOccurs="unbounded"/> </xsd:sequence>
 * </xsd:complexType> This changes at least the EventListType.java class file
 * when compiling the stubs. Background: Axis 1.3 does not support xsd:choice.
 * The stubs created by Axis 1.3 from the original schema files were not able to
 * return more than one Event of each type at once, however the specs clearly
 * say that there can be arbitrarily many. Because Axis2 was not ready for
 * production use at the time of this writing, we had not much choice.
 * Implications: The responses generated by the server stubs are still 100%
 * EPCIS standard compliant. However, the results will always be ordered
 * according to type, not in random order as the standard would allow. Our
 * client, however, will only work with our server, because it relies on the
 * fact that the answers are ordered. Using it with servers that do not order
 * the results may lead to arbitrary behaviour of our client (most likely lost
 * results).
 */

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

import org.accada.epcis.soapapi.ArrayOfString;
import org.accada.epcis.soapapi.EPCISServiceBindingStub;
import org.accada.epcis.soapapi.EPCglobalEPCISServiceLocator;
import org.accada.epcis.soapapi.EmptyParms;
import org.accada.epcis.soapapi.EventListType;
import org.accada.epcis.soapapi.GetSubscriptionIDs;
import org.accada.epcis.soapapi.Poll;
import org.accada.epcis.soapapi.QueryParam;
import org.accada.epcis.soapapi.QueryResults;
import org.accada.epcis.soapapi.Subscribe;
import org.accada.epcis.soapapi.Unsubscribe;

/**
 * Implements a Class to interface with the axis stubs for the EPCIS Query
 * Interface. Also offers some helper methods to convert between different
 * formats and for debug output.
 * 
 * @author David Gubler
 */
public class QueryClient {
    /**
     * Holds the locator for the service.
     */
    private EPCglobalEPCISServiceLocator service;

    /**
     * Holds the query parameters.
     */
    private Vector<QueryParam> queryParamsVector = new Vector<QueryParam>();

    /**
     * All debug output is written into this text field.
     */
    private JTextArea debugTextArea;

    /**
     * Constructor. Takes the service endpoint address and a JTextArea used for
     * debug output as an arguments.
     * 
     * @param address
     *            as JTextArea
     * @param area
     *            as string
     */
    public QueryClient(final String address, final JTextArea area) {
        debugTextArea = area;
        service = new EPCglobalEPCISServiceLocator();
        service.setEPCglobalEPCISServicePortEndpointAddress(address);
    }

    /**
     * Sets the service endpoint address.
     * 
     * @param address
     *            as String
     */
    public void setEndpointAddress(final String address) {
        service.setEPCglobalEPCISServicePortEndpointAddress(address);
    }

    /**
     * Converts the values in a calendar object into a nicely formatted string.
     * 
     * @param cal
     *            with the Calender-Date
     * @return String
     */
    private String prettyStringCalendar(final Calendar cal) {
        if (cal == null) {
            return null;
        }
        Date date = cal.getTime();
        return date.toString();
    }

    /**
     * Prints the results from Axis to the debug window in a nice way.
     * 
     * @param eventList
     *            of type EventListType
     */
    private void prettyPrintEvents(final EventListType eventList) {
        int i, j;

        debugTextArea.append("\n\nEvents returned by the server:\n\n");

        if (eventList.getObjectEvent() != null) {
            debugTextArea.append("ObjectEvents:\n");
            debugTextArea.append("-------------\n");
            for (i = 0; i < eventList.getObjectEvent().length; i++) {
                debugTextArea.append("eventTime:\t"
                        + prettyStringCalendar(eventList.getObjectEvent()[i].getEventTime())
                        + "\n");
                debugTextArea.append("recordTime:\t"
                        + prettyStringCalendar(eventList.getObjectEvent()[i].getRecordTime())
                        + "\n");
                debugTextArea.append("EPCList:\t");
                for (j = 0; j < eventList.getObjectEvent()[i].getEpcList().length; j++) {
                    debugTextArea.append(" '"
                            + eventList.getObjectEvent()[i].getEpcList()[j]
                            + "'");
                }
                debugTextArea.append("\n");
                debugTextArea.append("ActionType:\t"
                        + eventList.getObjectEvent()[i].getAction() + "\n");
                debugTextArea.append("bizStep:\t"
                        + eventList.getObjectEvent()[i].getBizStep() + "\n");
                debugTextArea.append("disposition:\t"
                        + eventList.getObjectEvent()[i].getDisposition() + "\n");
                if (eventList.getObjectEvent()[i].getReadPoint() != null) {
                    debugTextArea.append("readPoint:\t"
                            + eventList.getObjectEvent()[i].getReadPoint().getId().toString()
                            + "\n");
                } else {
                    debugTextArea.append("readPoint:\tnull\n");
                }
                if (eventList.getObjectEvent()[i].getBizLocation() != null) {
                    debugTextArea.append("bizLocation:\t"
                            + eventList.getObjectEvent()[i].getBizLocation().getId().toString()
                            + "\n");
                } else {
                    debugTextArea.append("bizLocation:\tnull\n");
                }
                debugTextArea.append("bizTransactions: Type, ID\n");
                for (j = 0; j < eventList.getObjectEvent()[i].getBizTransactionList().length; j++) {
                    debugTextArea.append("\t'"
                            + eventList.getObjectEvent()[i].getBizTransactionList()[j].getType()
                            + "', '"
                            + eventList.getObjectEvent()[i].getBizTransactionList()[j].getValue().toString()
                            + "'\n");
                }
                debugTextArea.append("\n");
            }
            debugTextArea.append("\n");
        }

        if (eventList.getAggregationEvent() != null) {
            debugTextArea.append("AggregationEvents:\n");
            debugTextArea.append("------------------\n");
            for (i = 0; i < eventList.getAggregationEvent().length; i++) {
                debugTextArea.append("eventTime:\t"
                        + prettyStringCalendar(eventList.getAggregationEvent()[i].getEventTime())
                        + "\n");
                debugTextArea.append("recordTime:\t"
                        + prettyStringCalendar(eventList.getAggregationEvent()[i].getRecordTime())
                        + "\n");
                debugTextArea.append("ParentID:\t"
                        + eventList.getAggregationEvent()[i].getParentID()
                        + "\n");
                debugTextArea.append("ChildEPCs:\t");
                for (j = 0; j < eventList.getAggregationEvent()[i].getChildEPCs().length; j++) {
                    debugTextArea.append(" '"
                            + eventList.getAggregationEvent()[i].getChildEPCs()[j]
                            + "'");
                }
                debugTextArea.append("\n");
                debugTextArea.append("ActionType:\t"
                        + eventList.getAggregationEvent()[i].getAction() + "\n");
                debugTextArea.append("bizStep:\t"
                        + eventList.getAggregationEvent()[i].getBizStep()
                        + "\n");
                debugTextArea.append("disposition:\t"
                        + eventList.getAggregationEvent()[i].getDisposition()
                        + "\n");

                if (eventList.getAggregationEvent()[i].getReadPoint() != null) {
                    debugTextArea.append("readPoint:\t"
                            + eventList.getAggregationEvent()[i].getReadPoint().getId().toString()
                            + "\n");
                } else {
                    debugTextArea.append("readPoint:\tnull\n");
                }
                if (eventList.getAggregationEvent()[i].getBizLocation() != null) {
                    debugTextArea.append("bizLocation:\t"
                            + eventList.getAggregationEvent()[i].getBizLocation().getId().toString()
                            + "\n");
                } else {
                    debugTextArea.append("bizLocation:\tnull\n");
                }
                debugTextArea.append("bizTransactions: Type, ID\n");
                for (j = 0; j < eventList.getAggregationEvent()[i].getBizTransactionList().length; j++) {
                    debugTextArea.append("\t'"
                            + eventList.getAggregationEvent()[i].getBizTransactionList()[j].getType()
                            + "', '"
                            + eventList.getAggregationEvent()[i].getBizTransactionList()[j].getValue().toString()
                            + "'\n");
                }
                debugTextArea.append("\n");
            }
            debugTextArea.append("\n");
        }

        if (eventList.getQuantityEvent() != null) {
            debugTextArea.append("QuantityEvents:\n");
            debugTextArea.append("---------------\n");
            for (i = 0; i < eventList.getQuantityEvent().length; i++) {
                debugTextArea.append("eventTime:\t"
                        + prettyStringCalendar(eventList.getQuantityEvent()[i].getEventTime())
                        + "\n");
                debugTextArea.append("recordTime:\t"
                        + prettyStringCalendar(eventList.getQuantityEvent()[i].getRecordTime())
                        + "\n");
                debugTextArea.append("ecpClass:\t"
                        + eventList.getQuantityEvent()[i].getEpcClass() + "\n");
                debugTextArea.append("Quantity:\t"
                        + eventList.getQuantityEvent()[i].getQuantity() + "\n");
                debugTextArea.append("bizStep:\t"
                        + eventList.getQuantityEvent()[i].getBizStep() + "\n");
                debugTextArea.append("disposition:\t"
                        + eventList.getQuantityEvent()[i].getDisposition()
                        + "\n");
                if (eventList.getQuantityEvent()[i].getReadPoint() != null) {
                    debugTextArea.append("readPoint:\t"
                            + eventList.getQuantityEvent()[i].getReadPoint().getId().toString()
                            + "\n");
                } else {
                    debugTextArea.append("readPoint:\tnull\n");
                }
                if (eventList.getQuantityEvent()[i].getBizLocation() != null) {
                    debugTextArea.append("bizLocation:\t"
                            + eventList.getQuantityEvent()[i].getBizLocation().getId().toString()
                            + "\n");
                } else {
                    debugTextArea.append("bizLocation:\tnull\n");
                }
                debugTextArea.append("bizTransactions: Type, ID:\n");
                for (j = 0; j < eventList.getQuantityEvent()[i].getBizTransactionList().length; j++) {
                    debugTextArea.append("\t'"
                            + eventList.getQuantityEvent()[i].getBizTransactionList()[j].getType()
                            + "', '"
                            + eventList.getQuantityEvent()[i].getBizTransactionList()[j].getValue().toString()
                            + "'\n");
                }
                debugTextArea.append("\n");
            }
            debugTextArea.append("\n");
        }

        if (eventList.getTransactionEvent() != null) {
            debugTextArea.append("TransactionEvents:\n");
            debugTextArea.append("------------------\n");
            for (i = 0; i < eventList.getTransactionEvent().length; i++) {
                debugTextArea.append("eventTime:\t"
                        + prettyStringCalendar(eventList.getTransactionEvent()[i].getEventTime())
                        + "\n");
                debugTextArea.append("recordTime:\t"
                        + prettyStringCalendar(eventList.getTransactionEvent()[i].getRecordTime())
                        + "\n");
                debugTextArea.append("parentID:\t"
                        + eventList.getTransactionEvent()[i].getParentID()
                        + "\n");
                debugTextArea.append("epcList:\t");
                for (j = 0; j < eventList.getTransactionEvent()[i].getEpcList().length; j++) {
                    debugTextArea.append(" '"
                            + eventList.getTransactionEvent()[i].getEpcList()[j]
                            + "'");
                }
                debugTextArea.append("\n");
                debugTextArea.append("ActionType:\t"
                        + eventList.getTransactionEvent()[i].getAction() + "\n");
                debugTextArea.append("bizStep:\t"
                        + eventList.getTransactionEvent()[i].getBizStep()
                        + "\n");
                debugTextArea.append("disposition:\t"
                        + eventList.getTransactionEvent()[i].getDisposition()
                        + "\n");
                if (eventList.getTransactionEvent()[i].getReadPoint() != null) {
                    debugTextArea.append("readPoint:\t"
                            + eventList.getTransactionEvent()[i].getReadPoint().getId().toString()
                            + "\n");
                } else {
                    debugTextArea.append("readPoint:\tnull\n");
                }
                if (eventList.getTransactionEvent()[i].getBizLocation() != null) {
                    debugTextArea.append("bizLocation:\t"
                            + eventList.getTransactionEvent()[i].getBizLocation().getId().toString()
                            + "\n");
                } else {
                    debugTextArea.append("bizLocation:\tnull\n");
                }
                debugTextArea.append("bizTransactions: Type, ID\n");
                for (j = 0; j < eventList.getTransactionEvent()[i].getBizTransactionList().length; j++) {
                    debugTextArea.append("\t'"
                            + eventList.getTransactionEvent()[i].getBizTransactionList()[j].getType()
                            + "', '"
                            + eventList.getTransactionEvent()[i].getBizTransactionList()[j].getValue().toString()
                            + "'\n");
                }
                debugTextArea.append("\n");
            }
            debugTextArea.append("\n");
        }
    }

    /**
     * Converts the results from Axis into a two-dimensional array. The format
     * is suitable for a JTable object.
     * 
     * @param eventList
     *            The EventListType from the query results.
     * @return The pretty-printed query results.
     */
    private Object[][] prettyTableEvents(final EventListType eventList) {
        int i, j;

        int nr = 0;

        if (eventList.getObjectEvent() != null) {
            nr += eventList.getObjectEvent().length;
        }
        if (eventList.getAggregationEvent() != null) {
            nr += eventList.getAggregationEvent().length;
        }
        if (eventList.getQuantityEvent() != null) {
            nr += eventList.getQuantityEvent().length;
        }
        if (eventList.getTransactionEvent() != null) {
            nr += eventList.getTransactionEvent().length;
        }

        Object[][] table = new Object[nr][12];

        int row = 0;

        debugTextArea.append("reading ObjectEvents...\n");
        if (eventList.getObjectEvent() != null) {
            for (i = 0; i < eventList.getObjectEvent().length; i++) {
                table[row][0] = "Object";
                table[row][1] = prettyStringCalendar(eventList.getObjectEvent()[i].getEventTime());
                table[row][2] = prettyStringCalendar(eventList.getObjectEvent()[i].getRecordTime());
                table[row][5] = "";
                for (j = 0; j < eventList.getObjectEvent()[i].getEpcList().length; j++) {
                    table[row][5] = table[row][5] + "'"
                            + eventList.getObjectEvent()[i].getEpcList()[j]
                            + "' ";
                }
                table[row][6] = eventList.getObjectEvent()[i].getAction();
                table[row][7] = eventList.getObjectEvent()[i].getBizStep();
                table[row][8] = eventList.getObjectEvent()[i].getDisposition();
                if (eventList.getObjectEvent()[i].getReadPoint() != null) {
                    table[row][9] = eventList.getObjectEvent()[i].getReadPoint().getId().toString();
                }
                if (eventList.getObjectEvent()[i].getBizLocation() != null) {
                    table[row][10] = eventList.getObjectEvent()[i].getBizLocation().getId().toString();
                }
                table[row][11] = "";
                for (j = 0; j < eventList.getObjectEvent()[i].getBizTransactionList().length; j++) {
                    table[row][11] = table[row][11]
                            + "'"
                            + eventList.getObjectEvent()[i].getBizTransactionList()[j].getType()
                            + ", "
                            + eventList.getObjectEvent()[i].getBizTransactionList()[j].getValue().toString()
                            + "'";
                    if (eventList.getObjectEvent()[i].getBizTransactionList().length > j + 1) {
                        table[row][11] = table[row][11] + "  ;  ";
                    }
                }
                row++;
            }
        }

        debugTextArea.append("reading AggregationEvents...\n");
        if (eventList.getAggregationEvent() != null) {
            for (i = 0; i < eventList.getAggregationEvent().length; i++) {
                table[row][0] = "Aggregation";
                table[row][1] = prettyStringCalendar(eventList.getAggregationEvent()[i].getEventTime());
                table[row][2] = prettyStringCalendar(eventList.getAggregationEvent()[i].getRecordTime());
                table[row][3] = eventList.getAggregationEvent()[i].getParentID();
                table[row][5] = "";
                for (j = 0; j < eventList.getAggregationEvent()[i].getChildEPCs().length; j++) {
                    table[row][5] = table[row][5]
                            + "'"
                            + eventList.getAggregationEvent()[i].getChildEPCs()[j]
                            + "' ";
                }
                table[row][6] = eventList.getAggregationEvent()[i].getAction();
                table[row][7] = eventList.getAggregationEvent()[i].getBizStep();
                table[row][8] = eventList.getAggregationEvent()[i].getDisposition();
                if (eventList.getAggregationEvent()[i].getReadPoint() != null) {
                    table[row][9] = eventList.getAggregationEvent()[i].getReadPoint().getId().toString();
                }
                if (eventList.getAggregationEvent()[i].getBizLocation() != null) {
                    table[row][10] = eventList.getAggregationEvent()[i].getBizLocation().getId().toString();
                }
                table[row][11] = "";
                for (j = 0; j < eventList.getAggregationEvent()[i].getBizTransactionList().length; j++) {
                    table[row][11] = table[row][11]
                            + "'"
                            + eventList.getAggregationEvent()[i].getBizTransactionList()[j].getType()
                            + ", "
                            + eventList.getAggregationEvent()[i].getBizTransactionList()[j].getValue().toString()
                            + "'";
                    if (eventList.getAggregationEvent()[i].getBizTransactionList().length > j + 1) {
                        table[row][11] = table[row][11] + "  ;  ";
                    }
                }
                row++;
            }
        }

        debugTextArea.append("reading QuantityEvents...\n");
        if (eventList.getQuantityEvent() != null) {
            for (i = 0; i < eventList.getQuantityEvent().length; i++) {
                table[row][0] = "Quantity";
                table[row][1] = prettyStringCalendar(eventList.getQuantityEvent()[i].getEventTime());
                table[row][2] = prettyStringCalendar(eventList.getQuantityEvent()[i].getRecordTime());
                table[row][4] = ""
                        + eventList.getQuantityEvent()[i].getQuantity();
                table[row][5] = "EPC class "
                        + eventList.getQuantityEvent()[i].getEpcClass();
                table[row][7] = eventList.getQuantityEvent()[i].getBizStep();
                table[row][8] = eventList.getQuantityEvent()[i].getDisposition();
                if (eventList.getQuantityEvent()[i].getReadPoint() != null) {
                    table[row][9] = eventList.getQuantityEvent()[i].getReadPoint().getId().toString();
                }
                if (eventList.getQuantityEvent()[i].getBizLocation() != null) {
                    table[row][10] = eventList.getQuantityEvent()[i].getBizLocation().getId().toString();
                }
                table[row][11] = "";
                for (j = 0; j < eventList.getQuantityEvent()[i].getBizTransactionList().length; j++) {
                    table[row][11] = table[row][11]
                            + "'"
                            + eventList.getQuantityEvent()[i].getBizTransactionList()[j].getType()
                            + ", "
                            + eventList.getQuantityEvent()[i].getBizTransactionList()[j].getValue().toString()
                            + "'";
                    if (eventList.getQuantityEvent()[i].getBizTransactionList().length > j + 1) {
                        table[row][11] = table[row][11] + "  ;  ";
                    }
                }
                row++;
            }
        }

        debugTextArea.append("reading TransactionEvents...\n");
        if (eventList.getTransactionEvent() != null) {
            for (i = 0; i < eventList.getTransactionEvent().length; i++) {
                table[row][0] = "Transaction";
                table[row][1] = prettyStringCalendar(eventList.getTransactionEvent()[i].getEventTime());
                table[row][2] = prettyStringCalendar(eventList.getTransactionEvent()[i].getRecordTime());
                table[row][3] = eventList.getTransactionEvent()[i].getParentID();
                table[row][5] = "";
                for (j = 0; j < eventList.getTransactionEvent()[i].getEpcList().length; j++) {
                    table[row][5] = table[row][5]
                            + "'"
                            + eventList.getTransactionEvent()[i].getEpcList()[j]
                            + "' ";
                }
                table[row][6] = eventList.getTransactionEvent()[i].getAction();
                table[row][7] = eventList.getTransactionEvent()[i].getBizStep();
                table[row][8] = eventList.getTransactionEvent()[i].getDisposition();
                if (eventList.getTransactionEvent()[i].getReadPoint() != null) {
                    table[row][9] = eventList.getTransactionEvent()[i].getReadPoint().getId().toString();
                }
                if (eventList.getTransactionEvent()[i].getBizLocation() != null) {
                    table[row][10] = eventList.getTransactionEvent()[i].getBizLocation().getId().toString();
                }
                table[row][11] = "";
                for (j = 0; j < eventList.getTransactionEvent()[i].getBizTransactionList().length; j++) {
                    table[row][11] = table[row][11]
                            + "'"
                            + eventList.getTransactionEvent()[i].getBizTransactionList()[j].getType()
                            + ", "
                            + eventList.getTransactionEvent()[i].getBizTransactionList()[j].getValue().toString()
                            + "'";
                    if (eventList.getTransactionEvent()[i].getBizTransactionList().length > j + 1) {
                        table[row][11] = table[row][11] + "  ;  ";
                    }
                }
                row++;
            }
        }
        debugTextArea.append("conversion to two-dimensional array complete\n");
        return table;
    }

    /**
     * Reset the query arguments.
     */
    public void clearParameters() {
        queryParamsVector.clear();
    }

    /**
     * Add a new query parameter.
     * 
     * @param param
     *            The query parameter to add.
     */
    public void addParameter(final QueryParam param) {
        queryParamsVector.add(param);
    }

    /**
     * Run the query with the currently set query arguments Returns the results
     * in a format that is suitable for JTable.
     * 
     * @return The pretty-printed query results.
     * @throws Exception
     *             If any Exception ocurred while invoking the query service.
     */
    public Object[][] runQuery() throws Exception {
        EPCISServiceBindingStub stub = (EPCISServiceBindingStub) service.getEPCglobalEPCISServicePort();

        QueryParam[] queryParams = new QueryParam[queryParamsVector.size()];
        queryParamsVector.toArray(queryParams);
        debugTextArea.append("Number of query parameters: "
                + queryParams.length + "\n");
        for (int i = 0; i < queryParams.length; i++) {
            debugTextArea.append(queryParams[i].getName() + " "
                    + queryParams[i].getValue() + "\n");
        }

        Poll pollparams = new Poll();
        pollparams.setQueryName("SimpleEventQuery");
        pollparams.setParams(queryParams);

        debugTextArea.append("running query...\n");
        QueryResults results = stub.poll(pollparams);

        debugTextArea.append("done\n");

        prettyPrintEvents(results.getResultsBody().getEventList());

        return prettyTableEvents(results.getResultsBody().getEventList());
    }

    /**
     * Registers the Query by the server.
     * 
     * @param subcr
     *            The Subscribe object containg the query.
     * @throws Exception
     *             If any Exception ocurred while invoking the query service.
     */
    public void subscribeQuery(final Subscribe subcr) throws Exception {
        EPCISServiceBindingStub stub = (EPCISServiceBindingStub) service.getEPCglobalEPCISServicePort();

        QueryParam[] queryParams = new QueryParam[queryParamsVector.size()];
        queryParamsVector.toArray(queryParams);
        debugTextArea.append("Number of query parameters: "
                + queryParams.length + "\n");
        for (int i = 0; i < queryParams.length; i++) {
            debugTextArea.append(queryParams[i].getName() + " "
                    + queryParams[i].getValue() + "\n");
        }

        subcr.setParams(queryParams);
        stub.subscribe(subcr);
    }

    /**
     * Removes a registersQuery by the server.
     * 
     * @param subscriptionID
     *            The ID of the query to be unsubscribed.
     */
    public void unsubscribeQuery(final String subscriptionID) {
        try {
            JFrame frame = new JFrame();
            if (subscriptionID.equals("")) {
                JOptionPane.showMessageDialog(frame,
                        "Please specify a SubscriptionID",
                        "Service is responding", JOptionPane.ERROR_MESSAGE);
                return;
            }
            EPCISServiceBindingStub stub;
            stub = (EPCISServiceBindingStub) service.getEPCglobalEPCISServicePort();
            Unsubscribe parms = new Unsubscribe();
            parms.setSubscriptionID(subscriptionID);
            stub.unsubscribe(parms);
            JOptionPane.showMessageDialog(frame, "Successfully unsubscribed.",
                    "Service is responding", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JFrame frame = new JFrame();
            StringWriter sw = new StringWriter();
            e.printStackTrace(new PrintWriter(sw));
            String stacktrace = sw.toString();
            JOptionPane.showMessageDialog(frame, "Sorry, the Service returned "
                    + "an Error:\n" + stacktrace, "Service is not responding",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

    }

    /**
     * Query the service for the supported standard version.
     * 
     * @return String
     * @throws Exception
     *             If any Exception ocurred while invoking the query service.
     */
    public String queryStandardVersion() throws Exception {
        EPCISServiceBindingStub stub = (EPCISServiceBindingStub) service.getEPCglobalEPCISServicePort();
        return stub.getStandardVersion(null);
    }

    /**
     * Query the service for the supported standard version.
     */
    public void querySubscriptionId() {
        try {
            EPCISServiceBindingStub stub = (EPCISServiceBindingStub) service.getEPCglobalEPCISServicePort();
            GetSubscriptionIDs parms = new GetSubscriptionIDs();
            parms.setQueryName("simpleQuery");
            ArrayOfString res = stub.getSubscriptionIDs(parms);
            String text = "The Service found the following "
                    + "SubscriptionID(s):\n";
            String[] resArray = res.getString();
            if (resArray != null) {
                for (String item : resArray) {
                    text += "- " + item + "\n";
                }
                JFrame frame = new JFrame();
                JOptionPane.showMessageDialog(frame, text,
                        "Service is responding",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                JFrame frame = new JFrame();
                JOptionPane.showMessageDialog(frame, "There are no "
                        + "Subscribed Queries.", "Service is responding",
                        JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (Exception e) {
            JFrame frame = new JFrame();
            JOptionPane.showMessageDialog(frame, "Sorry, the Service doesn't "
                    + "work", "Service is not responding",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    /**
     * Query the service for its version.
     * 
     * @return String
     * @throws Exception
     *             If any Exception ocurred while invoking the query service.
     */
    public String queryVendorVersion() throws Exception {
        EPCISServiceBindingStub stub = (EPCISServiceBindingStub) service.getEPCglobalEPCISServicePort();
        return stub.getVendorVersion(null);
    }

    /**
     * Query the service for its queries.
     * 
     * @return String
     * @throws Exception
     *             If any Exception ocurred while invoking the query service.
     */
    public String[] queryNames() throws Exception {
        EPCISServiceBindingStub stub = (EPCISServiceBindingStub) service.getEPCglobalEPCISServicePort();
        ArrayOfString temp = stub.getQueryNames(new EmptyParms());
        return temp.getString();
    }

    /**
     * Converts a space-seperated list to a Array of strings.
     * 
     * @param text
     *            wich is comma-seperated
     * @return the array of strings
     */
    public ArrayOfString stringListToArray(final String text) {
        Vector<String> parsed = new Vector<String>();
        String temp = "";
        for (int i = 0; i < text.length(); i++) {
            if (((Character) (text.charAt(i))).toString().equals(" ")
                    && temp != "") {
                parsed.add(temp);
                temp = "";
            } else if (!((Character) (text.charAt(i))).toString().equals(" ")) {
                temp += text.charAt(i);
            }
        }
        if (!temp.equals("")) {
            parsed.add(temp);
        }

        ArrayOfString converted = new ArrayOfString();
        String[] stringarray = {};
        stringarray = parsed.toArray(stringarray);
        converted.setString(stringarray);
        return converted;
    }
}
